// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zde37/Numeris-Task/internal/service (interfaces: InvoiceService)
//
// Generated by this command:
//
//	mockgen -package mocked -destination internal/mock/invoice_service.go github.com/zde37/Numeris-Task/internal/service InvoiceService
//

// Package mocked is a generated GoMock package.
package mocked

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/zde37/Numeris-Task/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoiceService is a mock of InvoiceService interface.
type MockInvoiceService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceServiceMockRecorder
}

// MockInvoiceServiceMockRecorder is the mock recorder for MockInvoiceService.
type MockInvoiceServiceMockRecorder struct {
	mock *MockInvoiceService
}

// NewMockInvoiceService creates a new mock instance.
func NewMockInvoiceService(ctrl *gomock.Controller) *MockInvoiceService {
	mock := &MockInvoiceService{ctrl: ctrl}
	mock.recorder = &MockInvoiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceService) EXPECT() *MockInvoiceServiceMockRecorder {
	return m.recorder
}

// AddInvoiceActivity mocks base method.
func (m *MockInvoiceService) AddInvoiceActivity(arg0 context.Context, arg1 models.AddInvoiceActivityRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInvoiceActivity", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInvoiceActivity indicates an expected call of AddInvoiceActivity.
func (mr *MockInvoiceServiceMockRecorder) AddInvoiceActivity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInvoiceActivity", reflect.TypeOf((*MockInvoiceService)(nil).AddInvoiceActivity), arg0, arg1)
}

// CreateInvoice mocks base method.
func (m *MockInvoiceService) CreateInvoice(arg0 context.Context, arg1 models.CreateInvoiceRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockInvoiceServiceMockRecorder) CreateInvoice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockInvoiceService)(nil).CreateInvoice), arg0, arg1)
}

// GetInvoiceActivities mocks base method.
func (m *MockInvoiceService) GetInvoiceActivities(arg0 context.Context, arg1, arg2 uuid.UUID, arg3, arg4 int32) ([]models.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceActivities", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceActivities indicates an expected call of GetInvoiceActivities.
func (mr *MockInvoiceServiceMockRecorder) GetInvoiceActivities(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceActivities", reflect.TypeOf((*MockInvoiceService)(nil).GetInvoiceActivities), arg0, arg1, arg2, arg3, arg4)
}

// GetInvoiceDetails mocks base method.
func (m *MockInvoiceService) GetInvoiceDetails(arg0 context.Context, arg1 uuid.UUID) (*models.InvoiceDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceDetails", arg0, arg1)
	ret0, _ := ret[0].(*models.InvoiceDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceDetails indicates an expected call of GetInvoiceDetails.
func (mr *MockInvoiceServiceMockRecorder) GetInvoiceDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceDetails", reflect.TypeOf((*MockInvoiceService)(nil).GetInvoiceDetails), arg0, arg1)
}

// GetRecentActivities mocks base method.
func (m *MockInvoiceService) GetRecentActivities(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int32) ([]models.RecentActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentActivities", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.RecentActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentActivities indicates an expected call of GetRecentActivities.
func (mr *MockInvoiceServiceMockRecorder) GetRecentActivities(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentActivities", reflect.TypeOf((*MockInvoiceService)(nil).GetRecentActivities), arg0, arg1, arg2, arg3)
}

// GetRecentInvoices mocks base method.
func (m *MockInvoiceService) GetRecentInvoices(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int32) ([]models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentInvoices", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentInvoices indicates an expected call of GetRecentInvoices.
func (mr *MockInvoiceServiceMockRecorder) GetRecentInvoices(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentInvoices", reflect.TypeOf((*MockInvoiceService)(nil).GetRecentInvoices), arg0, arg1, arg2, arg3)
}

// GetTotalByStatus mocks base method.
func (m *MockInvoiceService) GetTotalByStatus(arg0 context.Context, arg1 models.InvoiceStatus) (float64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalByStatus", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTotalByStatus indicates an expected call of GetTotalByStatus.
func (mr *MockInvoiceServiceMockRecorder) GetTotalByStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalByStatus", reflect.TypeOf((*MockInvoiceService)(nil).GetTotalByStatus), arg0, arg1)
}
