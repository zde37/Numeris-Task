// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zde37/Numeris-Task/internal/repository (interfaces: UserRepository)
//
// Generated by this command:
//
//	mockgen -package mocked -destination internal/mock/user_repo.go github.com/zde37/Numeris-Task/internal/repository UserRepository
//

// Package mocked is a generated GoMock package.
package mocked

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/zde37/Numeris-Task/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddCustomer mocks base method.
func (m *MockUserRepository) AddCustomer(arg0 context.Context, arg1 models.Customer) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomer", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomer indicates an expected call of AddCustomer.
func (mr *MockUserRepositoryMockRecorder) AddCustomer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomer", reflect.TypeOf((*MockUserRepository)(nil).AddCustomer), arg0, arg1)
}

// AddPaymentMethod mocks base method.
func (m *MockUserRepository) AddPaymentMethod(arg0 context.Context, arg1 models.UserPaymentMethod) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPaymentMethod", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPaymentMethod indicates an expected call of AddPaymentMethod.
func (mr *MockUserRepositoryMockRecorder) AddPaymentMethod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentMethod", reflect.TypeOf((*MockUserRepository)(nil).AddPaymentMethod), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(arg0 context.Context, arg1 models.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), arg0, arg1)
}
